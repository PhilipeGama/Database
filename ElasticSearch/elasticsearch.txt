GET /_cat/indices?v

GET /_cat/shards?v

GET /_cluster/health

PUT /pages


//  21 Criando e deletando indices

DELETE /pages

DELETE /products

PUT /products
{
    "settings": {
      "number_of_shards": 2, 
      "number_of_replicas": 2
    }
  
}

//  22 Indexando documentos

POST /products/_doc
{
  "name":"Coffee Maker",
  "price":64,
  "in_stock":10
}

PUT /products/_doc/100
{
  "name":"Toaster",
  "price":49,
  "in_stock":4
}

// 23 Recuperando documentos pelo id

GET /products/_doc/100

// 24 Atualizando documento

POST /products/_update/100
{
  "doc": {
    "tags":["eletronics"]
  }
}

// 25 Script de Atualização (in_stock = in_stock -1)

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock--"
  }
}

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock--"
  }
}


POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock -= params.quantity",
    "params": {
      "quantity": 4
    }
  }
}


POST /products/_update/100
{
  "script": {
    "source": """
    if (ctx._source.in_stock == 0){
        ctx.op = 'noop';  
    }
    
    ctx._source.in_stock--;
    """
    
  }
}


POST /products/_update/100
{
  "script": {
    "source": """
    if (ctx._source.in_stock > 0){
        ctx._source.in_stock--;
    }
    """
  }
}

POST /products/_update/100
{
  "script": {
    "source": """
    if (ctx._source.in_stock <= 1){
        ctx.op = 'delete';  
    }
    
    ctx._source.in_stock--;
    """
  }
}

GET /products/_doc/100

// 26. Upsert

POST /products/_update/101
{
  "script": {
      "source": "ctx._source.in_stock++"
  },
  "upsert": {
    "name": "Blender",
    "price": 299,
    "in_stock":5
  }
}

// 27. substituiu um documento

PUT /products/_doc/100
{
  "name": "Toaster",
  "price": 79,
  "in_stock": 4
}

// 28. deletar documentos

DELETE products/_doc/101


// 33. Optimistic concurrency control

GET /products/_doc/100

POST /products/_update/100?if_primary_term=3&if_seq_no=25
{
  "doc": {
    "in_stock":12
  }
}

// 34. Update by query

POST /products/_update_by_query
{
  "script":{
    "source":"ctx._source.in_stock--"
  },
  "query": {
    "match_all": {}
  }
}

POST /products/_update_by_query
{
  "conflicts": "prodceed",
  "script":{
    "source":"ctx._source.in_stock--"
  },
  "query": {
    "match_all": {}
  }
}

GET /products/_search
{
  "query": {
    "match_all": {}
  }
}

// 35. Delete by query

POST /products/_delete_by_query
{
  "query": {
    "match_all": {}
  }
}

// Batch processing

POST /_bulk
{ "index": {"_index": "products", "_id":200}}
{ "name":"Espresso Machine", "price":199, "in_stock":5}
{ "create": {"_index": "products", "_id":201}}
{ "name":"Milk Frother","price":149,"in_stock":14}

POST /_bulk
{ "update": {"_index": "products", "_id":201}}
{ "doc":{"price":129}}
{ "delete": {"_index": "products", "_id":200}}

POST /products/_bulk
{ "update": {"_id":201}}
{ "doc":{"price":129}}
{ "delete": {"_id":200}}


// 37. Import data with cUrl

curl -H "Content-Type: application/x-ndjson" -XPOST http://localhost:9200/product/_bulk --data-binary "@products-bulk.json"


// 41. Use the analyze API 

POST /_analyze
{
  "text": "2 guys walk into    a bar, but the trird... DUCKS! :-)",
  "analyzer": "standard"
  
}

POST /_analyze
{
  "text": "2 guys walk into    a bar, but the trird... DUCKS! :-)",
  "char_filter": [],
  "tokenizer": "standard",
  "filter": ["lowercase"]
}


// 46. Understanding type coercion

GET coercion_test/_search
{
  "query": {
    "match_all": {}
  }
}

PUT /coercion_test/_doc/1
{
  "price":7.4
}

PUT /coercion_test/_doc/2
{
  "price":"7.4"
}

PUT /coercion_test/_doc/3
{
  "price":"7.4m"
}

GET /coercion_test/_doc/2

// 48. Adding explicit mappings

PUT /reviews
{
  "mappings": {
    "properties": {
      "rating": {"type": "float"},
      "content": {"type": "text"},
      "product_id": {"type": "integer"},
      "author": {
        "properties": {
        "first_name": {"type": "text"},
        "last_name": {"type": "text"},
        "email": {"type": "keyword"}
        }
      }
    }
  }
}

// 49. Retrieving mappings

GET reviews/_mapping

GET reviews/_mapping/field/content

GET reviews/_mapping

GET reviews/_mapping/field/author.email


// 50. Using dot notation in field names

PUT /reviews_not_dotation
{
  "mappings": {
    "properties": {
      "rating": {"type": "float"},
      "content": {"type": "text"},
      "product_id": {"type": "integer"},
      "author.first_name": {"type": "text"},
      "author.last_name": {"type": "text"},
      "author.email": {"type": "keyword"}
      }
    }
  }
  
  GET /reviews_not_dotation/_mapping

// 51. Adding mappings to existing indices

PUT /reviews/_mapping
{
  "properties":{
    "created_at":{
      "type": "date"
    }
  }
}

//  54. Overview of mapping parameters
//coerce paramenter

PUT /sales
{
  "mappings":{

  }
}


PUT /sales
{
  "mappings":{
    "properties": {
      "amount":{
        "type": "float",
        "coerce":false
      }
    }  
  }
}


PUT /sales
{
  "settings": {
    "index.mapping.coerce":false
  }, 
  "mappings":{
    "properties": {
      "amount":{
        "type": "float",
        "coerce":true
      }
    }  
  }
}

// Introduction to doc_values

PUT /sales
{
  "mappings": {
    "properties": {
      "buyer_email":{
        "type": "keyword",
        "doc_values": false
      }
    }
  }
}

// norms parameter

PUT /products
{
  "mappings": {
    "properties": {
      "tags": {
        "type":"text",
        "norms":false
      }
    }
  }
}

// index parameter

PUT /server-metrics
{
  "mappings": {
    "properties": {
      "server_id":{
        "type": "integer",
        "index": false
      }
    }
  }
}


// null_value parameter

PUT /sales
{
  "mappings": {
    "properties": {
      "partner_id":{
          "type": "keyword",
          "null_value": "NULL"
      }
    }
  }
}

// copy_to parameter

PUT /sales2
{
  "mappings": {
    "properties": {
      "firts_name":{
        "type": "text",
        "copy_to": "full_name"
      },
      "last_name":{
        "type": "text",
        "copy_to": "full_name"
      },
      "full_name":{
        "type": "text"
      }
    }
  }
}


// 55. Updating existing mappings

PUT /reviews/_mapping
{
  "properties":{
    "product_id":{
      "type":" keywords"
    }
  }
}

PUT /reviews/_mapping
{
  "properties":{
    "author":{
      "properties":{
        "email":{
          "type": "keyword",
          "ignore_above": 256
        }
      }
    }
  }
}

56. Reindexing documents with the Reindex API

GET /reviews/_mappings


PUT /reviews_new
{
    "mappings" : {
      "properties" : {
        "author" : {
          "properties" : {
            "email" : {
              "type" : "keyword",
              "ignore_above" : 256
            },
            "first_name" : {
              "type" : "text",
              "fields" : {
                "keyword" : {
                  "type" : "keyword",
                  "ignore_above" : 256
                }
              }
            },
            "firts_name" : {
              "type" : "text"
            },
            "last_name" : {
              "type" : "text"
            }
          }
        },
        "content" : {
          "type" : "text"
        },
        "created_at" : {
          "type" : "date"
        },
        "product_id" : {
          "type" : "keyword"
        },
        "rating" : {
          "type" : "float"
        }
      }
    }
}
  

POST /_reindex
{
  "source": {
    "index":"reviews"
  },
  "dest":{
    "index": "reviews_news"
  }
}

GET /reviews/_search
{
  "query":{
    "match_all": {}
  }
}

GET /reviews_news/_search
{
  "query":{
    "match_all": {}
  }
}

POST /_reindex
{
  "source": {
    "index":"reviews"
  },
  "dest":{
    "index": "reviews_news"
  }
}

POST /_reindex
{
  "source": {
    "index":"reviews"
  },
  "dest":{
    "index": "reviews_news"
  },
  "script": {
    "source": """ 
    if(ctx._source.product_id != null){
        ctx._source.product_id = ctx._source.product_id.toString();
    }
    """
  }
}

57. Defining field aliases

PUT /reviews/_mapping
{
  "properties":{
    "comment":{
      "type": "alias",
      "path": "content"
    }
  }
}

GET /reviews/_search
{
  "query": {
    "match": {
      "content": "outstanding"
    }
  }
}


GET /reviews/_search
{
  "query": {
    "match": {
      "content": "outstanding"
    }
  }
}

// 58. Multi-field mappings

PUT /multi_field_test
{
  "mappings": {
    "properties": {
      "description":{
        "type": "text"
      },
      "ingredients":{
          "type": "text",
          "fields":{
            "keyword":{
              "type":"keyword"
            }
          }
      }
    }
  }
}

POST /multi_field_test/_doc
{
  "description": "To make this spaghetti carbonara, you first need to..",
  "ingredients": ["Spaghetti","Bacon","Eggs"]
}

GET /multi_field_test/_search
{
  "query": {
    "match_all": {}
  }
}

GET /multi_field_test/_search
{
  "query": {
    "match": {
      "ingredients": "Spaghetti"
    }
  }
}

GET /multi_field_test/_search
{
  "query": {
    "term": {
        "ingredients.keyword": "Spaghetti"
      }
  }
}

DELETE /multi_field_test

// 59. Index templates

PUT /_template/acess-log
{
  "index_patterns": ["acess-logs-*"],
  "settings": {
    "number_of_shards": 2,
    "index.mapping.coerce":false
  },
  "mappings": {
    "properties": {
      "@timestamp":{
        "type": "date"
      },
      "url.original":{
        "type": "keyword"
      },
      "http.request.referrer":{
        "type": "keyword"
      },
      "htpp.response.status.code":{
        "type":"long"     
      }
    }
  }
}

PUT /acess-logs-2020-01-01

GET /acess-logs-2020-01-01


// 62. Combining explicit and dynamic mapping

PUT /people
{ 
  "mappings": {
    "properties": {
      "firts_name":{
        "type": "text"
      }
    }
  }
}



POST /people/_doc
{
  "first_name": "Bo",
  "last_name": "Andersen"
}

GET /people/_mapping

#Clean up
DELETE /people


63. Configuring dynamic mapping

PUT /people
{ 
  
  "mappings": {
    "dynamic":"false",
    "properties": {
      "first_name":{
        "type": "text"
      }
    }
  }
}


PUT /people
{ 
  
  "mappings": {
    "dynamic":"strict",
    "properties": {
      "first_name":{
        "type": "text"
      }
    }
  }
}


POST /people/_doc
{
  "first_name": "Bo",
  "last_name": "A ndersen"
}

GET /people/_mapping

GET /people/_search
{
  "query": {
    "match": {
      "first_name": "Bo"    
    }
  }
}

GET /people/_search
{
  "query": {
    "match": {
      "last_name": "Andersen"    
    }
  }
}

#Clean up
DELETE /people

// 69. Creating custom analyzers

PUT /analyzer_test1
{
  "settings": {
    "analysis": {
      "analyzer": { 
        "my_custom_analyzer":{
          "type": "custom",
          "char_filter": ["html_strip"],
          "tokenizer": "standard",
          "filter":[
            "lowercase",
            "stop",
            "asciifolding"
            ]
        }
      }
    }
  }
}

PUT /analyzer_test2
{
  "settings": {
    "analysis": {
      "filter": {
        "danish_stop":{
          "type":"stop",
          "stopwords": "_danish_"
        }
      }, 
        "char_filter": {},
        "tokenizer": {}, 
      "analyzer": { 
        "my_custom_analyzer":{
          "type": "custom",
          "char_filter": ["html_strip"],
          "tokenizer": "standard",
          "filter":[
            "lowercase",
            "danish_stop",
            "asciifolding"
            ]
        }
      }
    }
  }
}

POST /_analyze
{
  "char_filter": ["html_strip"], 
  "text": "I&apos;m in a <em>good</em> mood&nbsp;-&nbsp;and I <strong>love</strong> açaí"
}

POST /analyzer_test1/_analyze
{
  "analyzer": "my_custom_analyzer",  
  "text": "I&apos;m in a <em>good</em> mood&nbsp;-&nbsp;and I <strong>love</strong> açaí"
}

POST /analyzer_test2/_analyze
{
  "analyzer": "my_custom_analyzer",  
  "text": "I&apos;m in a <em>good</em> mood&nbsp;-&nbsp;and I <strong>love</strong> açaí"
}


70. Adding analyzers to existing indices

PUT /analyzer_test
{
  "settings": {
    "analysis": {
      "analyzer": { 
        "my_custom_analyzer":{
          "type": "custom",
          "tokenizer": "standard",
          "char_filter": ["html_strip"],
          "filter":[
            "lowercase",
            "stop",
            "asciifolding"
            ]
        }
      }
    }
  }
}

PUT /analyzer_test/_settings
{
  "analysis":{
    "analyzer": { 
      "my_second_analyzer":{
        "type": "custom",
        "char_filter": ["html_strip"],
        "tokenizer": "standard",
        "filter":[
          "lowercase",
          "stop",
          "asciifolding"
        ]
      }
    }
  }
}


POST /analyzer_test/_close

POST /analyzer_test/_open

GET /analyzer_test/_settings

// 71. Updating analyzers

PUT /analyzer_test/_mapping
{
  "properties":{
    "description": {
      "type": "text",
      "analyzer": "my_custom_analyzer"
    }
  }
}

POST /analyzer_test/_doc
{
  "description": "Is that Peter's cute-looking dog?"
}


DELETE analyzer_test



GET analyzer_test/_search
{
  "query": {
    "match": {
      "description":{
        "query": "that",
        "analyzer": "keyword"
      }
    }
  }
}

POST /analyzer_test/_close


PUT /analyzer_test/_settings
{
  "settings": {
    "analysis": {
      "analyzer": { 
        "my_custom_analyzer":{
          "type": "custom",
          "tokenizer": "standard",
          "char_filter": ["html_strip"],
          "filter":[
            "lowercase",
            "asciifolding"
            ]
        }
      }
    }
  }
}

GET /analyzer_test/_settings

POST /analyzer_test/_open

PUT /analyzer_test
{
  "settings": {
    "analysis": {
      "analyzer": { 
        "my_custom_analyzer":{
          "type": "custom",
          "tokenizer": "standard",
          "char_filter": ["html_strip"],
          "filter":[
            "lowercase",
            "stop",
            "asciifolding"
            ]
        }
      }
    }
  }
}

POST analyzer_test/_update_by_query?conflicts=proceed


// 75. Searching with the request URI

GET /products/_search?q=*

GET /products/_search?q=name:Lobster

GET /products/_search?q=tags:Meat

GET /products/_search?q=tags:Meat AND name:Tuna

// 76. Introducing the Query DSL

GET /products/_search
{
  "query": {
    "match_all": {}
  }
}

// 79. Understanding relevance scores